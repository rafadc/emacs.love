#+AUTHOR:  Rafa de Castro
#+TITLE:   Emacs.love
#+EMAIL:   rafael@micubiculo.com
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/normalize.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/skeleton.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/site.css" />
#+HTML_HEAD: <link href='https://fonts.googleapis.com/css?family=Chivo' rel='stylesheet' type='text/css'>
#+HTML_HEAD: <a href="https://github.com/rafadc/emacs.love"><img style="position: absolute; top: 0; left: 0; border: 0;" src="https://camo.githubusercontent.com/c6286ade715e9bea433b4705870de482a654f78a/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f77686974655f6666666666662e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_left_white_ffffff.png"></a>
#+HTML_HEAD: <script src="site.js"></script>
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+TODO: SOMEDAY(s) TODO(t) INPROGRESS(i) WAITING(w@/!) NEEDSREVIEW(n@/!) | DONE(d)
#+TODO: WAITING(w@/!) HOLD(h@/!) | CANCELLED(c@/!)
#+TAGS: export(e) noexport(n)
#+STARTUP: align fold nodlcheck lognotestate content
#+HTML_LINK_HOME: http://emacs.love
#+HTML_CONTAINER: div class="container"

* Why Emacs?

There was a time that when a programmer opened emacs or vim everyone in the room said: "why don't you go to a better editor? why don't you use an IDE?". Fortunately, these days it is no longer like that. An emacs or vim user is no longer a weird beast but something more common.

[[./images/emacs_logo.png]]

Also when people see me using emacs they often ask me if I recommend using it. Well... my answer is often no. You will now be probably thinking why I'm taking the effort on writing this whole site if I'm not a huge emacs fan. Let me explain: I am an emacs fan. Anyway I know emacs' path is not for everyone. Some people feel no joy at all with it and I don't want to be the one causing that pain.

My advice is just to test it. To invest some time in trying and staying if you feel comfortable.

** But am I going to become a real coder with this?

You are going to become... an emacs user. That is it. Bragging about a text editor feels really weird to me to be honest. Unfortunately that is quite common. Have fun in what you do and become better at it. Those are my two cents on the subject.

** Is this another "Learn emacs in 2 weeks" course?

God, no. Using emacs is a long term investment. I've been using emacs for some years now and I feel like a beginner still. The learning curve is steep. Really steep and sometimes daunting. Do not be scare anyway since in the long run it is totally worth it. It can be a "Learn emacs in a lifetime" course.

Even this whole site was written using emacs' org-mode. You'll see how later.

One of the bad things of learning a complex text editor is that there will be a relatively long period of time where you will be less proficient with it than with your regular text editing system. Unfortunately I've not found a way to circumvent that. Emacs won't be showing its full power until you cross that gap. The prize is high anyway if you cross that line.

** How is this site supposed to work?

This site is first though as my personal notes on emacs even though I think that this format may be nice as some kind of wiki for this.

At least the first steps section should be read in advance. Then all the next sections can probably be read independently.

** Contributing

Anyone feel free to open an issue or even better to pull request something here. Use the white ribbon at the top left of the site. Probably there are a ton of typos and things that can be explained better. Also, English is not my first language so please, keep that in mind ;).

** How is this site different than the documentation?

The documentation is there and is absolutely awesome. The emacs tutorial is there and is absolutely awesome. This is just another approach. The one that worked for me in particular. It may or may not work for you. It is not meant to replace any of the documentation efforts done before. There are some turns in the approach that of course no official documentation should take.

For example we will jump soon into installing packages. I want to try a different approach in using emacs that an official thing should not make. I won't be comprehensive since I don't want to overwhelm somebody with a huge amount of information.

** Do I need to write lisp? Yuck!

Emacs lisp may not be the best language ever but it gets the job done. It feels more scary than it really is. I suggest giving it a try.

[[./images/lisp_warning.png]]

Of course you can use emacs with a bundle and mostly avoid lisp but in my humble opinion this is not recommended. Embrace it. It will pay in the long run.

** Why not using emacs Prelude or Spacemacs?

Those are beautiful sets of initial configuration. Anyway, for learning purposes I preferred to start with vanilla emacs.  Anyway, after feeling comfortable with the basics feel free to move to one of these great emacs distributions.

 - Emacs prelude: [[https://github.com/bbatsov/prelude]]
 - Spacemacs: http://spacemacs.org/

For teaching purposes it was easier to start this way since I did not have deal with the extra layer of features these great configs give. I use them from time to time to gather ideas.

Feel free to have one setup for experimenting and learning a bit and one for your daily job.

* First steps
** Moving around

Let's start moving the cursors and typing. Ok? It works. The first step for getting familiar with an editor is using it. Do not try to get all the shortcuts at the first attempt. It is too much to grasp. Let's get enough knowledge to be dangerous and then continue adding new tricks to your tool belt.

| C-g | Quit |

This is the first thing to learn as a beginner. It gets you out of trouble. If you are lost or you have started something and you don't know where you are it gets you back to a normal situation. One C-g and you are back to solid land again.

| C-x s | Save        |
| C-x c | Close emacs |

With those two combos you will save and quit. These three combinations make enough for you to start using emacs as your editor. The more you use it the more familiar you will be with it and the easier it will be to learn it.

Emacs is amazingly enormously extensible. If you don't feel comfortable with something in it you can, for sure, adapt it to you. Probably that is something I like about emacs. It doesn't make you adapt to it but it adapts to you.

** Starting emacs

If we start emacs from the command line typing just "emacs" you will see an emacs splash screen with some interesting links. For a while we will just assume that we will start emacs typing "emacs <filename>" and exit them after we finished with the file. That is not the usual way of using emacs but it can be enough for some time. Probably it will feel a bit slow now but keep calm, we will come back to this later.

** Evaluation of lisp code

We will start with the most simple of the configurations. 99% of people I know that use emacs disable menu and icon bar. Open any file and type the following.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

We are going to learn one way of evaluating lisp code.

| C-x C-e | evaluate-last-sexp |

Place the cursor after the first ")" and press our newly learned combo. You should see the menubar go away. But hey! Aren't we changing a config file. Did we reload the config somehow? No, we didn't. We just evaluated a lisp expression. We must think of emacs as a big program running and whose code can be evaluated at any moment. Indeed we can think of emacs as a big lisp interpreter that happens to have a text editor.

This means that we can evaluate code to check how the changes are going to look and finally save it to the file if we want to persist it for future use. Of course evaluating lisp code in you editor can be super useful not only for config files but let's stay at this point at the moment. Just remember that you can evaluate expressions anywhere in any kind of file you are opening emacs with.

What we are evaluating is a s-expression. What is that? An s-exp takes usually the form of

#+BEGIN_SRC emacs-lisp
(function_name argument1 argument2 ...)
#+END_SRC

So we can say that it is an expression between parentheses that starts with a function name and can have zero or more arguments afterwards.

Let's play with this a little bit. Type the following in any emacs buffer.

#+BEGIN_SRC emacs-lisp
(upcase "emacs")
#+END_SRC

Then place the cursor after the ")" and type C-x C-e. You should see EMACS as response at the bottom of your screen.

** Our first configuration changes

With all these newly acquired knowledge let's go back and try to change some config values for emacs. Let's go back to our previous snippet

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

Evaluate those two s-expressions. You should have no menu now and no toolbar. If you don't save anything and exit and open emacs again the changes will not be persisted. How do we fix that?

What happens when you type "emacs" in your console? After some time we have our emacs fired up and ready to roll but a lot of things have happened in the meantime.

Emacs first looks for ~/.emacs, ~/.emacs.el, or ~/.emacs.d/init.el files. I often recommend to use only the latter so we can keep our .emacs.d folder versioned under git or another VCS.

We can edit our init file so we can add whatever code we need to be executed at startup. Try and save those two lines and run emacs again. You no longer should have nor menubar nor tool bar.

All the config changes we make to emacs will be made in this file. Doesn't this make this file messy? Well... yes and no. Let's say that this will become messy if we are not careful ;). We will see ways of organizing our config file. Anyway we now have something to customize emacs to our needs. This is where the real fun begins.

** Installing packages :noexport:

As an emacs novice the most obvious way to enhance emacs documentation is to use external packages. One nice way of organizing packages is with [[https://github.com/jwiegley/use-package][use-package]]. This will give us some nice features and will help us to keep our config file a little bit more organized.

Ironically we need to install it using the embedded package manager. Starting from that moment we will try to install all dependedncies using use-package.

** Setting environment :noexport:

** Buffers, files, windows.... :noexport:

** Does emacs have a package system? :noexport:

Yes. Embedded. Anyway we will start by using a small layer over it.

** Let's make emacs less angry at you :noexport:

We will start using our newly acquired knowledge making emacs a bit less hard to use. This was key for me as a beginner.

*** Emacs help

Using emacs help is amazing. We will get familiar with some functions in the help to aid us to avoid darkness.

*** helm-M-x



* The beautiful org-mode :noexport:

** Documenting your configuration with org-mode
** How this book is written?

With emacs of course. You can fork it in our Github repository and edit the index.org file to change the contents or the site.css to change the style.

The index.org file contains all the text of the tutorial.

I have set up a pre-commit hook in git so I don't forget to upload the latest version of the html to the repository when pushing.

#+BEGIN_SRC bash
#!/bin/sh
emacs -batch index.org --eval="(org-html-export-to-html)"
git add index.html
rm index.html\~
#+END_SRC

There often are some unfinished sections in the org file. We just tag them with :noexport: and they will not be added to the HTML output.

* Emacs as a daemon :noexport:
